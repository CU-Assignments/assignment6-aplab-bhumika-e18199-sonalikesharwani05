import java.util.Stack;

class MaxStack {
    Stack<Integer> stack = new Stack<>();
    Stack<Integer> maxStack = new Stack<>();

    public void push(int val) {
        stack.push(val);
        if (maxStack.isEmpty() || val >= maxStack.peek()) {
            maxStack.push(val);
        }
    }

    public void pop() {
        if (stack.isEmpty()) {
            throw new RuntimeException("Stack is empty");
        }
        if (stack.peek().equals(maxStack.peek())) {
            maxStack.pop();
        }
        stack.pop();
    }

    public int top() {
        if (stack.isEmpty()) {
            throw new RuntimeException("Stack is empty");
        }
        return stack.peek();
    }

    public int getMax() {
        if (maxStack.isEmpty()) {
            throw new RuntimeException("Stack is empty");
        }
        return maxStack.peek();
    }

    public static void main(String[] args) {
        MaxStack maxStack = new MaxStack();
        maxStack.push(5);
        maxStack.push(3);
        maxStack.push(7);
        System.out.println(maxStack.getMax()); // Output: 7
        maxStack.pop();
        System.out.println(maxStack.getMax()); // Output: 5
        maxStack.pop();
        System.out.println(maxStack.getMax()); // Output: 5
    }
}

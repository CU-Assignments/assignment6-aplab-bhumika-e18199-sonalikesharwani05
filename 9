import java.util.LinkedList;
import java.util.Queue;

class DequeUsingQueue {
    Queue<Integer> queue = new LinkedList<>();

    public void addFront(int val) {
        queue.add(val);
        int size = queue.size();
        for (int i = 0; i < size - 1; i++) {
            queue.add(queue.remove());
        }
    }

    public void addRear(int val) {
        queue.add(val);
    }

    public int removeFront() {
        if (queue.isEmpty()) {
            throw new RuntimeException("Deque is empty");
        }
        return queue.remove();
    }

    public int removeRear() {
        if (queue.isEmpty()) {
            throw new RuntimeException("Deque is empty");
        }
        int size = queue.size();
        for (int i = 0; i < size - 1; i++) {
            queue.add(queue.remove());
        }
        return queue.remove();
    }

    public boolean isEmpty() {
        return queue.isEmpty();
    }

    public static void main(String[] args) {
        DequeUsingQueue deque = new DequeUsingQueue();
        deque.addFront(1);
        deque.addRear(2);
        deque.addFront(3);
        System.out.println(deque.removeFront()); // Output: 3
        System.out.println(deque.removeRear());  // Output: 2
    }
}
